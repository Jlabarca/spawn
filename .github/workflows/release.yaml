name: Build project & release
on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
    inputs:
      live_production:
        description: 'Live to production'
        required: true
        type: boolean
        default: false
      live_development:
        description: 'Live to develop'
        required: true
        type: boolean
        default: false
      release:
        description: 'Create github release (Tag required)'
        required: true
        type: boolean
        default: false

env:
  PROJECT_PATH: spawn_client/quantum_unity

jobs:
  variables:
    name: Define variables üîó
    runs-on: ubuntu-latest
    outputs:
      UNITY_VERSION: ${{ steps.set_unity_version.outputs.VERSION }}
      TAG: ${{ steps.set_tag.outputs.VERSION }}
      BUILD_NAME: ${{ steps.set_build_name.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PR_GITHUB_TOKEN }}
          fetch-depth: 0
          lfs: true
          submodules: recursive
      - run: git submodule update --remote --force --recursive --depth=1
      # - run: |
      #     git config --global url."https://github.com/".insteadOf "git@github.com:"
      #     git -c "http.extraheader=Authorization: basic ${{secrets.PR_GITHUB_TOKEN}}" -c protocol.version=2 submodule update --init --force --recursive --depth=1


      - name: Set unity version
        id: set_unity_version
        run: |
          UNITY_VERSION=$(sed -n 's/^\m_EditorVersion: //p'< ./${{ env.PROJECT_PATH }}/ProjectSettings/ProjectVersion.txt)
          echo "VERSION=$UNITY_VERSION" >> $GITHUB_OUTPUT

      - name: Set tag
        id: set_tag
        run: |
          VERSION=${GITHUB_REF/refs\/tags\//}
          VERSION=${VERSION//\//_}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Set target name
        id: set_build_name
        run: echo "VERSION=WebGL-${{ steps.set_tag.outputs.VERSION }}" >> $GITHUB_OUTPUT

      - name: Log variables
        run: |
          echo "UNITY_VERSION -> ${{ steps.set_unity_version.outputs.VERSION }}"
          echo "TAG -> ${{ steps.set_tag.outputs.VERSION }}"
          echo "BUILD_NAME -> ${{ steps.set_build_name.outputs.VERSION }}"

  buildProject:
    name: Create Unity Build üèó
    needs: [ variables ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PR_GITHUB_TOKEN }}
          fetch-depth: 0
          lfs: true
      - run: git submodule update --remote --force --recursive --depth=1

      - name: Unity Library Cache 2020 or higher
        uses: actions/cache@v3
        with:
          path: ${{ env.PROJECT_PATH }}/Library
          key: Library-${{ env.PROJECT_PATH }}-WebGL-${{ hashFiles(env.PROJECT_PATH) }}
          restore-keys: |
            Library-${{ env.PROJECT_PATH }}-WebGL-
            Library-${{ env.PROJECT_PATH }}-
            Library-

      - name: Build project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          buildMethod: UnityBuilderAction.BuildScript.BuildWithCommandlineArgs
          customParameters: -tag ${{ needs.variables.outputs.TAG }}
          projectPath: ${{ env.PROJECT_PATH }}
          targetPlatform: WebGL
          buildName: ${{ needs.variables.outputs.BUILD_NAME }}

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.variables.outputs.BUILD_NAME }}
          path: build/WebGL

  createRelease:
    name: Create Github release üêô
    permissions:
      contents: write
    if: ${{inputs.release}}
    needs: [ variables ]
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          generate_release_notes: true


  deployOnServer:
    name: Deploy to web server üöÄ
    needs: [ variables, buildProject ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: ${{ needs.variables.outputs.BUILD_NAME }}
          path: build

      - name: Display structure of root files
        run: ls -R
        working-directory: build/${{ needs.variables.outputs.BUILD_NAME }}

      - name: Deploy
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
            server: '${{ secrets.FTP_SERVER }}'
            username: '${{ secrets.FTP_USER }}'
            password: '${{ secrets.FTP_PASSWORD }}'
            local_path: './build/${{ needs.variables.outputs.BUILD_NAME }}/'
            remote_path: './${{ needs.variables.outputs.TAG}}/'
            sftpArgs: '-o ConnectTimeout=5'

      - name: Live to production
        if: ${{inputs.live_production}}
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USER }}
          password: ${{ secrets.FTP_PASSWORD }}
          script: |
            rm -rf ./html
            mkdir html
            rsync -a ./${{ needs.variables.outputs.TAG}}/${{ needs.variables.outputs.BUILD_NAME }}/ ./html/

      - name: Live to development
        if: ${{inputs.live_development}}
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USER }}
          password: ${{ secrets.FTP_PASSWORD }}
          script: |
            rm -rf ./html/dev/
            mkdir ./html/dev/
            rsync -a ./${{ needs.variables.outputs.TAG}}/${{ needs.variables.outputs.BUILD_NAME }}/ ./html/dev/
